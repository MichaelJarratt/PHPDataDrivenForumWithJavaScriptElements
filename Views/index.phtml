<?php require('template/header.phtml') ?>

<!--dropdown button for selecting category-->
<div class="container-fluid">
    <h3><a data-toggle="collapse" data-target="#filterCollapse">Filters</a></h3>
    <div id="filterCollapse" class="collapse">
        <form class="form-inline" action="<?php echo $_SERVER["PHP_SELF"] ?>">
            <div class="loginDiv">
                <label>Title: </label>
                <input type="text" name="titleSearch" <?php if(isset($_GET['titleSearch'])) echo "value = \"".$_GET['titleSearch']."\"" ?>>
            </div>
            <div class="loginDiv">
                <label>Content: </label>
                <input type="text" name="contentSearch" <?php if(isset($_GET['contentSearch'])) echo "value = \"".$_GET['contentSearch']."\"" ?>>
            </div>
            <div class="loginDiv">
                <label>Poster:</label>
                <input type="text" name="posterSearch" <?php if(isset($_GET['posterSearch'])) echo "value = \"".$_GET['posterSearch']."\"" ?>>
            </div>
            <select class="form-control" name="categorySelect">
                <?php
                //echoes out all categories from the database and "selected" one which the user has chosen before
                $categories = $view->categories;
                echo "<option value=\"all\">all</option>";
                foreach ($categories as $cat)
                {
                    if(isset($_GET["categorySelect"]) && $_GET["categorySelect"]==$cat["catName"])
                    {
                        echo "<option value=".$cat["catName"]." selected=\"selected\">".$cat["catName"]."</option>";
                    }
                    else
                    {
                        echo "<option value=".$cat["catName"].">".$cat["catName"]."</option>";
                    }
                }
                ?>
            </select> <!--php will get all categories from the database and display them here, it will have the open "selected" if the user selected it previously-->
            <!--form for applying filter options-->
                <button class="btn-primary form-control" type="submit">Apply Filter</button>
            </form>
    </div> <!--end of filter collapse-->
</div>

<!--this is the user menu at the top right of the screen-->
<?php if(isset($_SESSION['loggedIn']))
    //var_dump($view);
    echo"<div class=\"nav navbar_default nav-stacked pull-right\" id='optionsMenu'>
        <ul>
            <li><form class=\"form-control\" action=\"login.php\" method=\"post\" id='loginButtonForm'>
                                <input type=\"submit\" name=\"submit\" value=\"Log Out\" class='btn-link loginButton'>
                                <input type=\"hidden\" name=\"previousPage\" value=\"index.php\">
                                <input type='hidden' name='logOut' value='true'> 
                                </form></li>
            <li><a href=\"createPost.php\">Make a Post</a></li>
            <li><a href=\"messaging.php\">Messages</a></li>
        </ul>
    </div>"
?>

<div id="indexNotification" class="indexNotification" hidden> <!-- fixed element in bottom right that is made visible when notifications are received -->

</div>

<!--contains all posts displayed on index-->
<div id="postContainer" class="col-sm-8">
<?php
//each container will be a link to a "posts" page and will GET the postID to that page
$posts = (array)$view->posts; //gets array of post tuples
//echo "checkpoint";
//var_dump($posts);

//if no poss are found
if(count($posts) == 0)
{
    echo "<h2>No Matching posts found</h2>";
}

foreach ($posts as $post) //last post is replaced by previous post, meaning previous is displayed twice, IDK
{
    //var_dump($post);
    $postID = $post["postID"]; //post ID
    echo '
    
        <div class="container-fluid postListing">
            <h4><a href="Post.php?postID='.$postID.'"> '.$post["title"].'</a></h4>
                <p>
                    '.$post["content"].'
                </p>
                <div class="row" style="color: #2aabd2">
                        <p style="display:inline-block">by <a href="userPage.php?userID='.$post["userID"].'">'.$post["userName"].'</a></p>
                        <p style="display:inline-block "class="pull-right">'.$post["catName"].'</p>
                </div>
        </div>';
}
?>
</div>

<script>
    let userID = <?php if(isset($_SESSION['userID'])){echo $_SESSION['userID'];} else echo "-1" ?>; //if user is logged in echo underID, else echo -1, causes no errors but is invalid
    let noPosts = <?php echo count($posts); ?>; //tracks number of posts on page (used to remove duplicate posts)

    //console.log(noPosts);

    //console.log(window.location.search);
    //this script is responsible for handling the infinite scrolling feature
    let postContainer = document.getElementById("postContainer");
    let totalHeight = postContainer.offsetHeight;

    document.addEventListener("scroll", function (event) //triggers each time user scrolls
    {
        //console.log(event);
        //console.log("Scroll height: "+window.scrollY);

        let currentScroll = window.scrollY; //how far the user is down the page in pixels

        if(totalHeight - 1000 < currentScroll) //if the user is less than 1000px off the bottom of the page load more posts
        {
            //console.log("near bottom of page");
            //console.log(window.location.search+"&noPosts="+noPosts);
            totalHeight += 2000; //temporarily offsets height so that continued scrolling doesn't spam requests, actual height calculated when new posts are placed

            postRequest.open("POST","Models/scripts/getPosts.php");
            postRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); //more configuration
            postRequest.send((window.location.search+"&noPosts="+noPosts).substr(1)); //removes the "?" from the start of the query string
        }

        //console.log("Total height: "+totalHeight);
    })

    //part responsible for putting new posts in their place
    let postRequest = new XMLHttpRequest();
    postRequest.onload = function ()
    {
        //alert(postRequest.response);
        //console.log(postRequest.response);
        let posts = JSON.parse(postRequest.response);
        if(posts.length !== 0) //if any posts are returned
        {
            posts.forEach(function (post)
            {
                insertPost(post); //create post on page
                noPosts++; //increments the number of posts, prevents procedurally loaded posts from being duplicated
            });
            totalHeight = postContainer.offsetHeight; //recalculates height of page
        }
        //if there are no more posts then it will not change the increased "totalHeight", which prevents unnecessary triggers when scrolling
    };

    /*
     *  takes array containing post data as parameter
     *  appends post to postContainer
     */
    function insertPost(post)
    {
        postContainer.innerHTML += '<div class="container-fluid postListing">' +
            `                           <h4><a href="post.php?postID=${post['userID']}"> ${post['title']} </a></h4>   `+
            `                           <p> ${post["content"]} </p>` + //backtick (`) means that text can be inserted mid string
            '                           <div class="row" style="color: #2aabd2">' +
            `                              <p style="display: inline-block"> by <a href="userPage.php?userID=${post['userID']}"> ${post['userName']} </a></p> `+
            `                              <p style="display: inline-block" class="pull-right"> ${post['catName']} </p> `+
            '                           </div>'+
            '                        </div>';

    }

    notificationRequest = new XMLHttpRequest();
    //handler for getting notification data
    notificationRequest.onload = function ()
    {
        let notifications = JSON.parse(notificationRequest.response);
        if(notifications.length !== 0) // if user has any notifications
        {
            let noMessages = 0; //initialises count for messages
            notifications.forEach(function (notification) //counts up number of messages
            {
                noMessages+= parseInt(notification['messageCount']); //parsing because SQL returns the integer as string
            });

            let message = "You have "+noMessages+" new Message";
            if(noMessages > 1)
            {
                message += "s"; //appends an "s" if there are multiple notifications
            }
            message+= "!"; //closes the paragraph

            let indexNotificationBox = document.getElementById("indexNotification"); //gets div where notification is displayed
            indexNotificationBox.innerText = ""; //clears previous notification
            let notificationParagraph = document.createElement("p"); //creates new paragraph element
            notificationParagraph.innerText = message; //sets text
            indexNotificationBox.appendChild(notificationParagraph); //puts paragraph into div

            indexNotificationBox.removeAttribute("hidden"); //shows notification div
            //console.log("you have "+noMessages+" messages");
        }
    };

    function notificationPollLoop()
    {
        notificationRequest.open("POST","../Models/scripts/getNotifications.php");

        let formData = new FormData(); //data to send to getNotifications
        formData.append("userID",userID);
        notificationRequest.send(formData);

        setTimeout(notificationPollLoop,5000); //loops every 5 seconds
    }
    notificationPollLoop(); //sets loop going

</script>

<?php require('template/footer.phtml') ?>
