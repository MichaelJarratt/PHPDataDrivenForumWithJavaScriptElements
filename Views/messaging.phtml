<?php
require_once("template/header.phtml");
?>

<div> <!-- container which holds either contacts or chat window -->

    <!-- beginning of contacts listing -->
    <div id="contactsListDiv" class="container-fluid contactsDiv">
        <?php
        if(sizeof($view->contacts) == 0) //no contacts
        {
            echo "you have no contacts";
        }
        else
        {
            ?>
            <h2>Contacts</h2>
            <?php
            $contactIDs = [];
            foreach($view->contacts as $contact) //for each contact user has
            {
                array_push($contactIDs,$contact['userID']); //records userID in array
                $targetUserID = $contact['userID'];
                $targetUserName = $contact['username'];
                ?>
                <div class="container-fluid, contact-div">
                    <h3 ID="<?php echo $targetUserID ?>" onclick="openChatWindow(<?php echo $targetUserID ?>)"> <?php echo $targetUserName ?></h3>
                    <h4 ID="notification<?php echo $targetUserID ?>" class="notification right" hidden></h4>
                </div>
             <?php
            }
        }
        ?>
    </div>
    <!-- end of contacts listing -->

    <!-- beginning of chat window -->
    <div id="chatWindowDiv" class="chatWindow" hidden>
        <h2 id="messagingTargetTitle"></h2> <!-- will display chat targets username -->
        <h3 class="clickableText" onclick="returnToContactsList()"><- back to contacts</h3>
        <div id="messageArea" class="container-fluid"> <!-- will hold the chat -->

        </div>
        <textarea class="messageInput" id="messageInput" placeholder="Write a message.."></textarea>
        <label for="fileUpload">Upload Image</label>
        <input id="fileUpload" type="file" accept="image/*" name="fileUpload">
        <p id="typingStatusOutput" class="typingStatus"></p>
        <div id="debug"></div>
    </div>
    <!-- end of chat window -->
</div>
<script>
    let userID = <?php echo $_SESSION['userID'] ?>; //puts current users ID into script
    let targetUserID = -1; //placeholder value
    let contactsWindow = document.getElementById("contactsListDiv"); //div that shows all of users contacts
    let chatWindow = document.getElementById("chatWindowDiv"); //div where the chat and related details are displayed
    let messagingTargetTitle = document.getElementById("messagingTargetTitle"); //holds username of person user is messaging
    let messageArea = document.getElementById("messageArea"); //div which will contain the messages
    let chatWindowOpen = false; //when chat window is closed newMessagePollLoop will terminate
    let contactIDs = <?php echo json_encode($contactIDs) ?>; //puts array of contact IDs into javascript (used for message notifications)
    let messageInput = document.getElementById("messageInput"); //textarea user types messages into
    let fileUpload = document.getElementById("fileUpload"); // reference of file upload input
    fileUpload.multiple = false; //sets the file upload so that multiple files can't be collected

    //############################ begin open/close chat window functions
    //###################################################################
    //When users name is clicked onclick event triggers this function and passes the ID of the selected user
    function openChatWindow(p_targetUserID)
    {
        targetUserID = p_targetUserID; //p_ = parameter - can't disambiguate between parameters and variables with same name
        //console.log("now messaging: "+targetUserID);
        let targetUserName = document.getElementById(targetUserID).innerText
        //console.log("now messaging: "+targetUserID+", "+targetUserName);
        contactsWindow.setAttribute("hidden","true");
        chatWindow.removeAttribute("hidden"); //makes chat window visible
        messagingTargetTitle.innerText = "Now messaging "+targetUserName;

        chatWindowOpen = true;
        newMessagePollLoop(); //initiate loop polling for new messages
        typingStatusPollLoop(); //initiate loop polling for typing status
    }
    //when user clicks "back to contacts" in chat window this makes the chat invisible and the contacts visible again
    function returnToContactsList()
    {
        chatWindow.setAttribute("hidden","true");
        contactsWindow.removeAttribute("hidden");
        messagingTargetTitle.innerText = ""; //empties username from chat window

        // when implemented will also remove all chat messages
        messageArea.innerHTML = ""; //removes all messages from messageArea
        chatWindowOpen = false; //will cause polling loop to terminate
        latestMessageID = -1; //reset latest message to placeholder
        notificationLoop(); //begins polling for message notification
    }
    //############################## end open/close chat window functions
    //###################################################################


    //###############################begin send/receive message functions
    //###################################################################
    let messageRequest = new XMLHttpRequest();
    let latestMessageID = -1; //placeholder, increments to stop unnecessary data being sent from server
    //how messages are handled when received
    //------------------------------------
    messageRequest.onerror = function()
    {
        console.log("error requesting messages")
    };
    messageRequest.onload = function ()
    {
        //console.log("current user: "+userID);
        //console.log("received message data from server");
        let messages = JSON.parse(messageRequest.response); //every message that is returned by php script
        messages.forEach(function (message) //for each message
        {
            if(parseInt(message['messageID']) > latestMessageID) //if the messages ID is greater than the ID of the last message
            {
                latestMessageID = parseInt(message['messageID']); //increment latestMessageID
            }

            // this is where the chat bubbles are created and populated
            let messageDiv = document.createElement("div"); //creates div that will hold the message
            messageDiv.classList.add("chatMessage"); //adds the class chatMessage
            if(parseInt(message['senderID']) === userID) //if message was sent by current user
                messageDiv.classList.add("sent");
            else
                messageDiv.classList.add("received");

            messageDiv.appendChild(document.createTextNode(message['message'])); //creates paragraph element and appends to to the message div

            if(typeof message['fileName'] !== 'undefined') //if this message has a file
            {
                let image = document.createElement("img");
                image.src = "images/"+message['fileName'];
                image.classList.add("messageImage");
                image.alt = message['originalName']; //names the image by it's original name when uploaded
                messageDiv.appendChild(image);
            }

            let timeSentP = document.createElement("p"); //element which hold the time sent
            timeSentP.innerText = "sent: "+ message['timeSent']; //sets it's text
            timeSentP.classList.add("timeSent"); //sets its class
            messageDiv.appendChild(timeSentP); //adds it to the message div

            messageArea.appendChild(messageDiv); //adds message to chat window
        })
    };
    //polls server for new messages
    function newMessagePollLoop()
    {
        if(chatWindowOpen) //if chat window is still open
        {
            //console.log("polling server for messages");
            messageRequest.open("POST","Models/scripts/getChatMessages.php"); //will access getChatMessages with data sent in $_POST
            messageRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); //more configuration
            messageRequest.send("userID="+userID+"&targetUserID="+targetUserID+"&latestMessageID="+latestMessageID);
            setTimeout(newMessagePollLoop,2500); //repeats itself every 2.5 seconds
        }
    }

    //how messages are sent to server
    function sendMessage()
    {
        let messageSendRequest = new XMLHttpRequest();
        messageSendRequest.open("POST", "Models/scripts/sendMessage.php"); //will access getNotifications with data in $_POST
        messageSendRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); //more configuration
        messageSendRequest.send("userID=" + userID + "&targetUserID=" + targetUserID + "&message=" + messageInput.value);
        //console.log("userID=" + userID + "&targetID=" + targetUserID + "&message=" + messageInput.value);
        messageInput.value = ""; //empties input box

        let files = fileUpload.files; //gets files list from file upload element
        if(files.length !== 0) //if a file has been chosen
        {
            let formData = new FormData();
            formData.append("image", files[0]); //puts file into payload
            formData.append("userID",userID);
            formData.append("targetUserID",targetUserID);

            let imageRequest = new XMLHttpRequest(); //request for inserting images into db
            imageRequest.onload = function()
            {
                let debug = document.getElementById("debug");
                debug.innerHTML = imageRequest.response;
            };
            imageRequest.open("POST","Models/scripts/sendImage.php");
            imageRequest.send(formData); //sends file to script
            fileUpload.value = null; //resets input
        }

    }
    //################################ end send/receive message functions
    //###################################################################

    //################ begin event listeners ############################
    //###################################################################
    //event listener for "enter" on messageInput, triggers sending of message to server
    messageInput.addEventListener("keydown",function (event)
    {
        // console.log("key pressed");
        // let files = fileUpload.files; //gets files list from file upload element
        // //console.log(files[0]);
        //
        // let formData = new FormData();
        // formData.append('image',files[0]); //appends uploaded file
        // formData.append('userID',userID);
        // formData.append('targetUserID',targetUserID);
        //
        // let imageRequest = new XMLHttpRequest();
        // imageRequest.onload = function()
        // {
        //     let debug = document.getElementById("debug");
        //     debug.innerHTML = imageRequest.response;
        //     //console.log(imageRequest.response);
        // };
        // imageRequest.open("POST","Models/scripts/image.php");
        // //imageRequest.setRequestHeader("Content-type","multipart/form-data"); //send files
        // imageRequest.send(formData);

        //fetch("Models/scripts/sendMessage.php",{method: 'POST', body formData})

        var keycode = event.keyCode || event.which; //I have no idea why or how this works but it does
        if(keycode == '13' && (fileUpload.files.length !== 0 || messageInput.value.length !== 0)) //if user pressed enter
        {
            sendMessage(); //trigger sending message to server
            if(event.preventDefault) //stops extra blank line being entered by browser
                event.preventDefault();
        }
    });

    //event listener for user selecting textarea (user is typing)
    messageInput.addEventListener("focusin",function ()
    {
        //console.log("typing");
        setTypingStatus(1);
    });
    //event listener for user deselecting textarea (user is not longer typing)
    messageInput.addEventListener("focusout",function ()
    {
        //console.log("no longer typing");
        setTypingStatus(0)
    });
    //function which sets typing status in DB
    function setTypingStatus(status)
    {
        let statusUpdateRequest = new XMLHttpRequest();
        statusUpdateRequest.open("POST","Models/scripts/setTypingStatus.php")
        statusUpdateRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        statusUpdateRequest.send("userID="+userID+"&targetUserID="+targetUserID+"&status="+status);
    }
    //################ end event listeners ##############################
    //###################################################################

    //################## begin notification functions ###################
    //###################################################################
    let notificationRequest = new XMLHttpRequest();
    notificationRequest.onload = function ()
    {
        let notificationContacts = []; //array of contacts who have notifications for this user
        let notifications = JSON.parse(notificationRequest.response)
        //console.log("//notifications received:");

        notifications.forEach(function (notification) //if notifications are empty then it does nothing, as it should
        {
            //console.log("You have "+notification['messageCount']+" unread messages from "+notification['senderID']);
            notificationContacts.push(notification['senderID']);
            let notificationBox = document.getElementById("notification"+notification['senderID']); //gets notificationBox for this contact

            notificationBox.innerText = notification['messageCount']+" New Message"; //generic text
            if(notification['messageCount']>1) //more than one notification
            {
                notificationBox.innerText+="s"; //makes "Message" plural
            }
            //makes notificationBox visible
            notificationBox.removeAttribute("hidden");
        });

        //clear notifications from contacts who have no new messaged to read
        contactIDs.forEach(function (contactID)
        {
            //console.log("checking not. from contact: "+contactID);
            if(!notificationContacts.includes(contactID)) //if contact does not have any notifications for user
            {
                //console.log("contact "+contactID+" has no new messages");
                let notificationBox = document.getElementById("notification"+contactID); //gets notification box for this contact
                if(!notificationBox.hasAttribute("hidden")) //if notification box is not hidden (meaning there was a notification and the user then read the message)
                {
                    notificationBox.setAttribute("hidden","true");
                    notificationBox.innerText = ""; //removes message
                }
            }
        })
    };

    //function loops while contacts window is active and notifies new messages
    function notificationLoop()
    {
        if(!chatWindowOpen) //if contacts list is open
        {
            notificationRequest.open("POST", "Models/scripts/getNotifications.php");
            notificationRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            notificationRequest.send("userID=" + userID);
            setTimeout(notificationLoop,2500); //loops every 2.5 seconds
        }
    }
    notificationLoop(); //start polling for notifications when page loads

    let typingStatusRequest = new XMLHttpRequest()
    //typing status request handling
    typingStatusRequest.onload = function ()
    {
        let typingStatusOutput = document.getElementById("typingStatusOutput");
        if(typingStatusRequest.response === "true") //if other user is typing to this user
        {
            let targetUserName = document.getElementById(targetUserID).innerText
            //console.log("other user is typing to you");
            typingStatusOutput.innerText = targetUserName+" is typing.."; //"[other user] is typing.."
        }
        else
        {
            typingStatusOutput.innerText = "";
        }
    };

    function typingStatusPollLoop()
    {
        if(chatWindowOpen) //if chat window is open
        {
            typingStatusRequest.open("POST", "Models/scripts/getTypingStatus.php");
            typingStatusRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            typingStatusRequest.send("userID=" + userID + "&targetUserID=" + targetUserID);
            setTimeout(typingStatusPollLoop, 2500); //loops every 2.5 seconds
        }
    }
    //################### end notification functions ####################
    //###################################################################
</script>
<?php
require_once("template/footer.phtml");
?>
